# An example of how to add a new revision control system type to mr.
# git fake bare repositories have a detached workspace. One potential
# application is storing dotfiles in git, keeping them checked out in
# ones $HOME, but checked into different git repositories. This file adds
# support for them, separate from the normal git support.

# To make mr use this file, add a line like this inside the [DEFAULT]
# section of your ~/.mrconfig
#include = cat /usr/share/mr/git-fake-bare

# And an example repo using it would look something like:
#[.dotfiles]
#checkout = git_fake_bare_checkout git://... .dotfiles <worktree, eg. ..>

lib =
	# git doesn't have an easy way to check out such a repo, so
	# do it by hand
	git_fake_bare_checkout() {
		url="$1"
		repo="$2"
		worktree="$3"
		git clone --no-checkout "$url" "$repo"
		cd "$repo"
		mkdir -p "$worktree"
		git read-tree HEAD
		git checkout-index -a --prefix="$worktree" || true
		git config core.worktree "$worktree"
		mv .git/* .
		rmdir .git
	}
	git_get_worktree() {
		local worktree
		worktree="$(git config --get core.worktree)" || true
		if [ -z "$worktree" ]; then
			error "git worktree is not set"
		fi
		worktree="${worktree%%/}/"
		if [ ! -d "$worktree" ]; then
			error "git worktree $worktree does not exist"
		fi
		echo "$worktree"
	}

git_fake_bare_test = 
	test -d "$MR_REPO"/refs/heads && test -d "$MR_REPO"/refs/tags &&
	test -d "$MR_REPO"/objects && test -f "$MR_REPO"/config &&
	test "$(GIT_CONFIG="$MR_REPO"/config git config --get core.bare)" = false

git_fake_bare_update =
	args="$@"
	[ -z "$args" ] && args="-t origin master"
	eval GIT_DIR="$MR_REPO" git pull "$args"

git_fake_bare_status = git status "$@" || true

git_fake_bare_commit = error "commit does not work for fake bare git repositories (yet)."

git_fake_bare_record = error "record does not work for fake bare git repositories (yet)."

git_fake_bare_diff = error "diff does not work for fake bare git repositories (yet)."

git_fake_bare_log = git log "$@"

git_fake_bare_register = 
	url="$(LC_ALL=C GIT_CONFIG=config git config --get remote.origin.url)" || true
	if [ -z "$url" ]; then
		error "cannot determine git url"
	fi
	worktree="$(git_get_worktree)"
	echo "Registering git url: $url in $MR_CONFIG (with worktree $worktree)"
	mr -c "$MR_CONFIG" config "`pwd`" \
		checkout="git_fake_bare_checkout '$url' '$MR_REPO' '$worktree'"

# vim:sw=8:sts=0:ts=8:noet
